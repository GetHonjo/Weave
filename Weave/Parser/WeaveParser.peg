@namespace Weave.Parser
@classname WeaveParser
@using Weave.Expressions

template <Template>
    = s:section EOF {
        new Template(s)
    }

section <IList<Element>>
    = element*

element <Element>
    = tag
    / text

tag <Element>
    = ifTag
    / eachTag
    / "{{:" WS? expression "}}" { new EchoTag() }
    / "{{=" WS? expression "}}" { new EchoTag() }

ifTag <IfTag>
    = ifBody elifBody* elseBody? endIf { new IfTag() }

ifBody
    = "{{if" WS+ expression "}}" element* 

elifBody
    = "{{elif" WS+ expression "}}" element*

elseBody
    = "{{else}}" element*

endIf
    = "{{/if}}"

eachTag <EachTag>
    = eachBody noneBody? endEach { new EachTag() }

eachBody
    = "{{each" WS+ expression "}}" element*

noneBody
    = "{{none}}" element*

endEach
    = "{{/each}}"

text <TextElement>
    = value:("" (!"{{" .)+) { new TextElement(value) }

expression
    = "" (!"}}" .)+

WS
    = [ \t\v\f\u00A0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]

EOF
  = !.
  / unexpected:. #ERROR{ string.Format("Unexpected character '{0}'.", unexpected) }
