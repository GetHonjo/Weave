@namespace Weave.Parser
@classname WeaveParser
@using System.Globalization
@using System.Linq
@using Weave.Expressions
@using Weave.Properties
@members
{
    private class RenderTag
    {
        public SourceSpan Method { get; set; }
        public SourceSpan Expression { get; set; }
    }
}

template <Template>
    = settings:setting* EOL? elements:lines (EOF / unexpected:. #ERROR{ "WEAVE0007:" + string.Format(CultureInfo.CurrentCulture, Resources.WEAVE0007_UNEXPECTED_CHARACTER, unexpected) }) {
        new Template(settingsStart, settings, elementsStart, elements, elementsEnd)
    }

setting <KeyValuePair<SourceSpan, SourceSpan>>
    = "@" key:identifier WS+ value:("" (!EOL .)+) (EOL / EOF) {
        new KeyValuePair<SourceSpan, SourceSpan>(
            key,
            new SourceSpan(value, valueStart, valueEnd))
    }

lines <IList<Element>>
    = lines:line* { lines.SelectMany(l => l).ToList() }

line <IList<Element>>
    = t:tag { new[] { t } }
    / textLine

textLine <IList<Element>>
    = !EOF indentation:(!EOL WS+)? contents:inlineElement* end:(EOL / EOF) {{
        var results = new List<Element>();
        results.AddRange(indentation.Select(i => new IndentationElement(i)));
        results.AddRange(contents);

        if (end != string.Empty)
        {
            results.Add(new NewLineElement());
        }

        return results;
    }}

inlineContents <IList<Element>>
    = body:(<IEnumerable<Element>> first:textLine middle:lines { first.Concat(middle) })? rest:inlineElement* { body.SelectMany(b => b).Concat(rest).ToList() }

inlineElement <Element>
    = t:text { new TextElement(t) }
    / echoTag
    / inlineCodeElement
    / inlineIfElement
    / inlineEachElement
    / inlineRenderElement

tag <Element>
    = codeElement
    / ifElement
    / eachElement
    / renderElement

codeElement <CodeElement>
    = indentation:("" WS*) expr:codeTag WS* (EOL / EOF) { new CodeElement(expr, indentation) }

inlineCodeElement <CodeElement>
    = expr:codeTag  { new CodeElement(expr) }

ifElement <IfElement>
    = if:ifBody elseIfs:elifBody* else:elseBody? endIndentation:("" WS*) endIfTag WS* (EOL / EOF) {
        new IfElement(new[] { @if }.Concat(elseIfs).Concat(@else), endIndentation)
    }

ifBody <Branch>
    = indentation:("" WS*) expr:ifTag   WS* EOL body:lines { new Branch(expr, body, indentation) }

elifBody <Branch>
    = indentation:("" WS*) expr:elifTag WS* EOL body:lines { new Branch(expr, body, indentation) }

elseBody <Branch>
    = indentation:("" WS*) elseTag      WS* EOL body:lines { new Branch(null, body, indentation) }

inlineIfElement <IfElement>
    = if:inlineIfBody elseIfs:inlineElifBody* else:inlineElseBody? endIfTag {
        new IfElement(new[] { @if }.Concat(elseIfs).Concat(@else))
    }

inlineIfBody <Branch>
    = expr:ifTag   body:inlineContents { new Branch(expr, body) }

inlineElifBody <Branch>
    = expr:elifTag body:inlineContents { new Branch(expr, body) }

inlineElseBody <Branch>
    = elseTag      body:inlineContents { new Branch(null, body) }

eachElement <EachElement>
    = each:eachBody none:noneBody? endIndentation:("" WS*) endEachTag WS* (EOL / EOF) {
        new EachElement(@each, none.SingleOrDefault(), endIndentation)
    }

eachBody <EachBody>
    = indentation:("" WS*) expr:eachTag WS* EOL body:lines { new EachBody(expr, (IList<Element>)body, indentation) }

noneBody <NoneBody>
    = indentation:("" WS*) noneTag WS* EOL body:lines { new NoneBody(body, indentation) }

inlineEachElement <EachElement>
    = each:inlineEachBody none:inlineNoneBody? endEachTag {
        new EachElement(@each, none.SingleOrDefault())
    }

inlineEachBody <EachBody>
    = expr:eachTag body:inlineContents { new EachBody(expr, body) }

inlineNoneBody <NoneBody>
    = noneTag body:inlineContents { new NoneBody(body) }

renderElement <RenderElement>
    = indentation:("" WS*) tag:renderTag WS* (EOL / EOF) { new RenderElement(tag.Method, tag.Expression, indentation) }

inlineRenderElement <RenderElement>
    = tag:renderTag { new RenderElement(tag.Method, tag.Expression) }

codeTag <SourceSpan>  = "{{" &(WS / EOL) expr:expression "}}"                  { expr }
ifTag   <SourceSpan>  = "{{if" &(WS / EOL) expr:expression "}}"                { expr }
elifTag <SourceSpan>  = "{{elif" &(WS / EOL) expr:expression "}}"              { expr }
elseTag               = "{{else}}"
endIfTag              = "{{/if}}"
eachTag <SourceSpan>  = "{{each" &(WS / EOL) expr:expression "}}"              { expr }
noneTag               = "{{none}}"
endEachTag            = "{{/each}}"
renderTag <RenderTag> = "{{@" name:identifier &(WS / EOL) expr:expression "}}" { new RenderTag { Method = name, Expression = expr } }
echoTag <EchoTag>     = "{{:" expr:expression "}}"                             { new EchoTag(expr, encoded: true)  }
                      / "{{=" expr:expression "}}"                             { new EchoTag(expr, encoded: false) }

text -memoize
    = "" (!EOL !"{{" .)+

expression <SourceSpan>
    = text:("" (!"}}" .)+) { new SourceSpan(text, textStart, textEnd) }

identifier <SourceSpan>
    = i:(!digit (letter / digit / "_" / "$")+) { new SourceSpan(i, iStart, iEnd) }

digit
  = [0-9]

letter
  = lowerCaseLetter
  / upperCaseLetter

lowerCaseLetter
  = [a-z]

upperCaseLetter
  = [A-Z]

WS
    = [ \t\v\f\u00A0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]

EOL
    = "\n"
    / "\r\n"
    / "\r"
    / "\u2028"
    / "\u2029"

EOF
  = !.
