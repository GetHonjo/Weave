@namespace Weave.Parser
@classname WeaveParser
@using System.Linq
@using Weave.Expressions

template <Template>
    = s:section EOF {
        new Template(s)
    }

section <IList<Element>>
    = element*

element <Element>
    = tag
    / text

tag <Element>
    = ifTag
    / eachTag
    / "{{:" WS? expr:expression "}}" { new EchoTag(expr, encoded: true) }
    / "{{=" WS? expr:expression "}}" { new EchoTag(expr, encoded: false) }
    / "{{" &WS expr:expression "}}" { new CodeElement(expr) }

ifTag <IfTag>
    = if:ifBody elseIfs:elifBody* else:elseBody? endIf {
        new IfTag(new[] { @if }.Concat(elseIfs).Concat(@else))
    }

ifBody <Branch>
    = "{{if" WS+ expr:expression "}}" body:element* { new Branch(expr, body) }

elifBody <Branch>
    = "{{elif" WS+ expr:expression "}}" body:element* { new Branch(expr, body) }

elseBody <Branch>
    = "{{else}}" body:element* { new Branch(null, body) }

endIf
    = "{{/if}}"

eachTag <EachTag>
    = "{{each" WS+ expr:expression "}}" body:element* none:noneBody? endEach {
        new EachTag(expr, body, none.SingleOrDefault())
    }

noneBody <IList<Element>>
    = "{{none}}" body:element* { body }

endEach
    = "{{/each}}"

text <TextElement>
    = value:("" (!"{{" .)+) { new TextElement(value) }

expression
    = "" (!"}}" .)+

WS
    = [ \t\r\n\v\f\u00A0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]

EOF
  = !.
  / unexpected:. #ERROR{ string.Format("Unexpected character '{0}'.", unexpected) }
