// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Weave 1.0.0.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace 
#line 1 "EachElement.weave"
           Weave.Compiler
#line default


{
    using System.IO;
    using 
    #line 4 "EachElement.weave"
       Weave.Expressions
    #line default

;

        
 partial class     Templates

    {
        [System.CodeDom.Compiler.GeneratedCode("Weave", "1.0.0.0")]
        public void 
        #line 2 "EachElement.weave"
            RenderEachElement
        #line default

(
        #line 3 "EachElement.weave"
       EachElement
        #line default

 model, TextWriter writer, string indentation = null)
        {
            var originalIndentation = indentation = indentation ?? string.Empty;
            indentation = originalIndentation;
            var temp0 = indentation;

            #line 6 "EachElement.weave"
  
    var amount = GetIndentationOffset(model.EachBody.Indentation, model.EachBody.Body);
    this.amountToSubtract += amount;
    var flag = this.CreateVariable("_flag");

            #line default

            indentation = temp0;
            if (

                #line 11 "EachElement.weave"
     model.NoneBody != null
                #line default

                )
            {
                indentation = originalIndentation;
                writer.Write(indentation);
                writer.Write("bool ");
                writer.Write(
                #line 12 "EachElement.weave"
             flag 
                #line default

);
                writer.Write(";");
                writer.WriteLine();
                writer.WriteLine();
            }
            indentation = originalIndentation;
            writer.Write(indentation);
            writer.Write("foreach (var ");
            var model0 = 
            #line 15 "EachElement.weave"
                           model.EachBody.Expression
            #line default

;
            
            #line 15 "EachElement.weave"
                RenderCode
            #line default

(model0, writer, indentation);
            writer.Write(")");
            writer.WriteLine();
            indentation = originalIndentation;
            writer.Write(indentation);
            writer.Write("{");
            writer.WriteLine();
            if (

                #line 17 "EachElement.weave"
         model.NoneBody != null
                #line default

                )
            {
                indentation = originalIndentation + "    ";
                writer.Write(indentation);
                writer.Write(
                #line 18 "EachElement.weave"
            flag 
                #line default

);
                writer.Write(" = true;");
                writer.WriteLine();
            }
            indentation = originalIndentation + "    ";
            var model1 = 
            #line 20 "EachElement.weave"
                    model.EachBody.Body
            #line default

;
            
            #line 20 "EachElement.weave"
       WalkElements
            #line default

(model1, writer, indentation);
            indentation = originalIndentation;
            writer.Write(indentation);
            writer.Write("}");
            writer.WriteLine();
            indentation = originalIndentation;
            var temp1 = indentation;

            #line 22 "EachElement.weave"
  
    this.amountToSubtract -= amount;

            #line default

            indentation = temp1;
            writer.WriteLine();
            if (

                #line 26 "EachElement.weave"
     model.NoneBody != null
                #line default

                )
            {
                indentation = originalIndentation;
                var temp2 = indentation;

                #line 27 "EachElement.weave"
      
        amount = GetIndentationOffset(model.EachBody.Indentation, model.EachBody.Body);
        this.amountToSubtract += amount;
    
                #line default

                indentation = temp2;
                indentation = originalIndentation;
                writer.Write(indentation);
                writer.Write("if (!");
                writer.Write(
                #line 31 "EachElement.weave"
             flag 
                #line default

);
                writer.Write(")");
                writer.WriteLine();
                indentation = originalIndentation;
                writer.Write(indentation);
                writer.Write("{");
                writer.WriteLine();
                indentation = originalIndentation + "    ";
                var model2 = 
                #line 33 "EachElement.weave"
                        model.NoneBody.Body
                #line default

;
                
                #line 33 "EachElement.weave"
           WalkElements
                #line default

(model2, writer, indentation);
                indentation = originalIndentation;
                writer.Write(indentation);
                writer.Write("}");
                writer.WriteLine();
                writer.WriteLine();
                indentation = originalIndentation;
                var temp3 = indentation;

                #line 36 "EachElement.weave"
      
        this.amountToSubtract -= amount;
    
                #line default

                indentation = temp3;
            }
        }
    }
}