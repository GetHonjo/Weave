// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Weave 1.0.0.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace 
#line 1 "RenderElement.weave"
           Weave.Compiler
#line default


{
    using System.IO;
        using 
#line 4 "RenderElement.weave"
       Weave.Expressions
#line default

;

        
 partial class     Templates

    {
        [System.CodeDom.Compiler.GeneratedCode("Weave", "1.0.0.0")]
        public void 
#line 2 "RenderElement.weave"
            RenderRenderElement
#line default

(
#line 3 "RenderElement.weave"
       RenderElement
#line default

 model, TextWriter writer, string indentation = null)
        {
            indentation = indentation ?? string.Empty;
            var temp0 = indentation;

#line 6 "RenderElement.weave"
   var newModel = this.CreateVariable("model"); 
#line default

            indentation = temp0;
            writer.Write(indentation);
            writer.Write("var ");
            writer.Write(
#line 7 "RenderElement.weave"
        newModel 
#line default

);
            writer.Write(" = ");
            var temp1 = indentation;

#line 7 "RenderElement.weave"
                         this.RenderCode(model.Expression, writer); 
#line default

            indentation = temp1;
            writer.Write(";");
            writer.WriteLine();
            writer.Write(indentation);
            var temp2 = indentation;

#line 8 "RenderElement.weave"
   this.RenderCode(model.Method, writer); 
#line default

            indentation = temp2;
            writer.Write("(");
            writer.Write(
#line 8 "RenderElement.weave"
                                                 newModel 
#line default

);
            writer.Write(", writer, indentation + ");
            writer.Write(
#line 8 "RenderElement.weave"
                                                                                        ToLiteral(model.Indentation) 
#line default

);
            writer.Write(");");
            writer.WriteLine();
        }
    }
}