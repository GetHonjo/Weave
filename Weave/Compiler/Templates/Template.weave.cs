
// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Weave 1.0.0.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace Weave.Compiler
{
    using System.IO;
    
        using System.Linq;
    
        using System.Reflection;
    
        using Weave.Expressions;
    

     partial class Templates
    {
        [System.CodeDom.Compiler.GeneratedCode("Weave", "1.0.0.0")]
        public void RenderTemplate(Template model, TextWriter writer)
        {
            
    var settings = model.Settings.ToLookup(s => s.Key.Value, s => (object)s.Value);
    var @namespace = settings["namespace"].Single();
    var accessibility = settings["accessibility"].SingleOrDefault() ?? string.Empty;
    var className = settings["classname"].SingleOrDefault() ?? "Templates";
    var methodName = settings["methodname"].SingleOrDefault() ?? "Render";
    var modelName = settings["model"].SingleOrDefault() ?? "dynamic";
    var assemblyName = Assembly.GetExecutingAssembly().GetName();

writer.Write("\r\n// -----------------------------------------------------------------------\r\n// <auto-generated>\r\n//   This code was generated by ");
writer.Write(assemblyName.Name );
writer.Write(" ");
writer.Write(assemblyName.Version );
writer.Write("\r\n//\r\n//   Changes to this file may cause incorrect behavior and will be lost if\r\n//   the code is regenerated.\r\n// </auto-generated>\r\n// -----------------------------------------------------------------------\r\n\r\nnamespace ");
writer.Write(@namespace );
writer.Write("\r\n{\r\n    using System.IO;\r\n    ");




foreach (var  @using in settings["using"])
{
    

    writer.Write("\r\n        using ");
writer.Write(@using );
writer.Write(";\r\n    ");

}

writer.Write("\r\n\r\n    ");
writer.Write(accessibility );
writer.Write(" partial class ");
writer.Write(className );
writer.Write("\r\n    {\r\n        [System.CodeDom.Compiler.GeneratedCode(\"");
writer.Write(assemblyName.Name );
writer.Write("\", \"");
writer.Write(assemblyName.Version );
writer.Write("\")]\r\n        public void ");
writer.Write(methodName );
writer.Write("(");
writer.Write(modelName );
writer.Write(" model, TextWriter writer)\r\n        {\r\n            ");
 base.WalkTemplate(model); 
writer.Write("\r\n        }\r\n    }\r\n}");

        }
    }
}