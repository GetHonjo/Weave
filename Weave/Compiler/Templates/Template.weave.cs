// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Weave 1.0.0.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
    #line 1 "Template.weave"
           Weave.Compiler
    #line default
{
    using System;
    using System.IO;
    using
        #line 3 "Template.weave"
       System.Linq
        #line default
        ;
    using
        #line 4 "Template.weave"
       System.Reflection
        #line default
        ;
    using
        #line 5 "Template.weave"
       Weave.Expressions
        #line default
        ;

    partial class
    Templates
    {
        [System.CodeDom.Compiler.GeneratedCode("Weave", "1.0.0.0")]
        public void
        RenderTemplate
            (
            #line 2 "Template.weave"
       Template
            #line default
            model, TextWriter writer, string indentation = null)
        {
            var originalIndentation = indentation = indentation ?? string.Empty;
            var temp0 = indentation;
            #line 7 "Template.weave"
  
    var settings = model.Settings.ToLookup(s => s.Key.Value, s => (object)s.Value);
    var accessibility = settings["accessibility"].SingleOrDefault() ?? string.Empty;
    var className = settings["classname"].SingleOrDefault() ?? "Templates";
    var encode = settings["encode"].SingleOrDefault();
    var methodName = settings["methodname"].SingleOrDefault() ?? "Render" + Path.GetFileNameWithoutExtension(model.Start.FileName);
    var modelName = settings["model"].SingleOrDefault() ?? "dynamic";
    var @namespace = settings["namespace"].Single();
    var assemblyName = Assembly.GetExecutingAssembly().GetName();

            #line default
            indentation = temp0;
            writer.Write(indentation);
            writer.Write("// -----------------------------------------------------------------------");
            writer.WriteLine();
            writer.Write(indentation);
            writer.Write("// <auto-generated>");
            writer.WriteLine();
            writer.Write(indentation);
            writer.Write("//   This code was generated by ");
            writer.Write(
                #line 19 "Template.weave"
                                    assemblyName.Name 
                #line default
                );
            writer.Write(" ");
            writer.Write(
                #line 19 "Template.weave"
                                                             assemblyName.Version 
                #line default
                );
            writer.WriteLine();
            writer.Write(indentation);
            writer.Write("//");
            writer.WriteLine();
            writer.Write(indentation);
            writer.Write("//   Changes to this file may cause incorrect behavior and will be lost if");
            writer.WriteLine();
            writer.Write(indentation);
            writer.Write("//   the code is regenerated.");
            writer.WriteLine();
            writer.Write(indentation);
            writer.Write("// </auto-generated>");
            writer.WriteLine();
            writer.Write(indentation);
            writer.Write("// -----------------------------------------------------------------------");
            writer.WriteLine();
            writer.WriteLine();
            writer.Write(indentation);
            writer.Write("namespace");
            writer.WriteLine();
            indentation = originalIndentation + "    ";
            var model0 =
                #line 27 "Template.weave"
                  @namespace
                #line default
                ;
            RenderCode(model0, writer, indentation);
            indentation = originalIndentation;
            writer.Write(indentation);
            writer.Write("{");
            writer.WriteLine();
            indentation = originalIndentation + "    ";
            writer.Write(indentation);
            writer.Write("using System;");
            writer.WriteLine();
            writer.Write(indentation);
            writer.Write("using System.IO;");
            writer.WriteLine();
            foreach (var
                #line 31 "Template.weave"
           @using in settings["using"]
                #line default
                )
            {
                indentation = originalIndentation + "    ";
                writer.Write(indentation);
                writer.Write("using");
                writer.WriteLine();
                indentation = originalIndentation + "        ";
                var model1 =
                    #line 33 "Template.weave"
                          @using
                    #line default
                    ;
                RenderCode(model1, writer, indentation);
                writer.Write(indentation);
                writer.Write(";");
                writer.WriteLine();
            }

            writer.WriteLine();
            indentation = originalIndentation + "    ";
            var model2 =
                #line 37 "Template.weave"
                  accessibility
                #line default
                ;
            RenderCode(model2, writer, indentation);
            writer.Write(indentation);
            writer.Write("partial class");
            writer.WriteLine();
            var model3 =
                #line 39 "Template.weave"
                  className
                #line default
                ;
            RenderCode(model3, writer, indentation);
            writer.Write(indentation);
            writer.Write("{");
            writer.WriteLine();
            indentation = originalIndentation + "        ";
            writer.Write(indentation);
            writer.Write("[System.CodeDom.Compiler.GeneratedCode(\"");
            writer.Write(
                #line 41 "Template.weave"
                                                    assemblyName.Name 
                #line default
                );
            writer.Write("\", \"");
            writer.Write(
                #line 41 "Template.weave"
                                                                                assemblyName.Version 
                #line default
                );
            writer.Write("\")]");
            writer.WriteLine();
            writer.Write(indentation);
            writer.Write("public void");
            writer.WriteLine();
            var model4 =
                #line 43 "Template.weave"
                      methodName
                #line default
                ;
            RenderCode(model4, writer, indentation);
            indentation = originalIndentation + "            ";
            writer.Write(indentation);
            writer.Write("(");
            writer.WriteLine();
            var model5 =
                #line 45 "Template.weave"
                          modelName
                #line default
                ;
            RenderCode(model5, writer, indentation);
            writer.Write(indentation);
            writer.Write("model, TextWriter writer, string indentation = null)");
            writer.WriteLine();
            indentation = originalIndentation + "        ";
            writer.Write(indentation);
            writer.Write("{");
            writer.WriteLine();
            if (
                #line 48 "Template.weave"
                 encode != null
                #line default
                )
            {
                indentation = originalIndentation + "            ";
                writer.Write(indentation);
                writer.Write("var encode = new Func<object, string>(");
                writer.WriteLine();
                indentation = originalIndentation + "                ";
                var model6 =
                    #line 50 "Template.weave"
                                  encode
                    #line default
                    ;
                RenderCode(model6, writer, indentation);
                writer.Write(indentation);
                writer.Write(");");
                writer.WriteLine();
            }
            indentation = originalIndentation + "            ";
            writer.Write(indentation);
            writer.Write("var originalIndentation = indentation = indentation ?? string.Empty;");
            writer.WriteLine();
            var model7 =
                #line 54 "Template.weave"
                                model
                #line default
                ;
            BaseWalkTemplate(model7, writer, indentation);
            indentation = originalIndentation + "        ";
            writer.Write(indentation);
            writer.Write("}");
            writer.WriteLine();
            indentation = originalIndentation + "    ";
            writer.Write(indentation);
            writer.Write("}");
            writer.WriteLine();
            indentation = originalIndentation;
            writer.Write(indentation);
            writer.Write("}");
        }
    }
}