@namespace Weave.Compiler
@methodname RenderTemplate
@model Template
@using System.Linq
@using System.Reflection
@using Weave.Expressions

{{
    var settings = model.Settings.ToLookup(s => s.Key.Value, s => (object)s.Value);
    var @namespace = settings["namespace"].Single();
    var accessibility = settings["accessibility"].SingleOrDefault() ?? string.Empty;
    var className = settings["classname"].SingleOrDefault() ?? "Templates";
    var methodName = settings["methodname"].SingleOrDefault() ?? "Render";
    var modelName = settings["model"].SingleOrDefault() ?? "dynamic";
    var assemblyName = Assembly.GetExecutingAssembly().GetName();
}}
// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by {{= assemblyName.Name }} {{= assemblyName.Version }}
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace {{= @namespace }}
{
    using System.IO;
    {{each @using in settings["using"]}}
        using {{= @using }};
    {{/each}}

    {{= accessibility }} partial class {{= className }}
    {
        [System.CodeDom.Compiler.GeneratedCode("{{= assemblyName.Name }}", "{{= assemblyName.Version }}")]
        public void {{= methodName }}({{= modelName }} model, TextWriter writer)
        {
            {{ base.WalkTemplate(model); }}
        }
    }
}