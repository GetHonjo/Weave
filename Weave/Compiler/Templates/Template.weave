@namespace Weave.Compiler
@model Template
@using System.Linq
@using System.Reflection
@using Weave.Expressions

{{
    var settings = model.Settings.ToLookup(s => s.Key.Value, s => (object)s.Value);
    var accessibility = settings["accessibility"].SingleOrDefault() ?? string.Empty;
    var className = settings["classname"].SingleOrDefault() ?? "Templates";
    var encode = settings["encode"].SingleOrDefault();
    var methodName = settings["methodname"].SingleOrDefault() ?? "Render" + Path.GetFileNameWithoutExtension(model.Start.FileName);
    var modelName = settings["model"].SingleOrDefault() ?? "dynamic";
    var @namespace = settings["namespace"].Single();
    var assemblyName = Assembly.GetExecutingAssembly().GetName();
}}
// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by {{= assemblyName.Name }} {{= assemblyName.Version }}
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
    {{@RenderCode @namespace}}
{
    using System;
    using System.IO;
    {{each @using in settings["using"]}}
        using
            {{@RenderCode @using}}
            ;
    {{/each}}

    {{@RenderCode accessibility}}
    partial class
    {{@RenderCode className}}
    {
        [System.CodeDom.Compiler.GeneratedCode("{{= assemblyName.Name }}", "{{= assemblyName.Version }}")]
        public void
        {{@RenderCode methodName}}
            (
            {{@RenderCode modelName}}
            model, TextWriter writer, string indentation = null)
        {
            {{if encode != null}}
                var encode = new Func<object, string>(
                    {{@RenderCode encode}}
                    );
            {{/if}}
            var originalIndentation = indentation = indentation ?? string.Empty;
            {{@BaseWalkTemplate model}}
        }
    }
}